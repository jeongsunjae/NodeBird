{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    imagePaths,\n    isAddingPost,\n    postAdded\n  } = useSelector(state => state.post);\n  const imageInput = useRef();\n  useEffect(() => {\n    if (postAdded) {\n      setText('');\n    }\n  }, [postAdded]);\n  const onSubmitForm = useCallback(e => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        content: text.trim()\n      }\n    });\n  }, [text]);\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n  const onChangeImages = useCallback(e => {\n    console.log(e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmitForm\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n    value: text,\n    onChange: onChangeText\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: 'right'\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"\\uB4F1\\uB85D\")), __jsx(\"div\", null, imagePaths.map(v => __jsx(\"div\", {\n    key: v,\n    style: {\n      display: 'inline-block'\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3000/${v}`,\n    style: {\n      width: '200px'\n    },\n    alt: v\n  }), __jsx(\"div\", null, __jsx(Button, null, \"\\uC81C\\uAC70\"))))));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/components/PostForm.js"],"names":["React","useCallback","useState","useEffect","useRef","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","PostForm","dispatch","text","setText","imagePaths","isAddingPost","postAdded","state","post","imageInput","onSubmitForm","e","trim","alert","type","data","content","onChangeText","target","value","onChangeImages","console","log","files","imageFormData","FormData","forEach","call","f","append","onClickImageUpload","current","click","margin","float","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const imageInput = useRef();\r\n\r\n  useEffect(() => {\r\n    if (postAdded) {\r\n      setText('');\r\n    }\r\n  }, [postAdded]);\r\n\r\n  const onSubmitForm = useCallback((e) => {\r\n    \r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: {\r\n        content: text.trim(),\r\n      },\r\n    });\r\n  }, [text]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n\r\n\r\n  const onChangeImages = useCallback((e)=> {\r\n    console.log(e.target.files);\r\n\r\n    const imageFormData = new FormData();\r\n\r\n    [].forEach.call(e.target.files, (f) => {\r\n\r\n      imageFormData.append('image', f);\r\n\r\n    });\r\n\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    })\r\n  },[])\r\n  const onClickImageUpload = useCallback(() => {\r\n    \r\n    imageInput.current.click();\r\n\r\n  },[imageInput.current]);\r\n\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmitForm}>\r\n      <Input.TextArea maxLength={140} placeholder=\"내용을 입력하세요\" value={text} onChange={onChangeText} />\r\n      <div>\r\n        <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\" loading={isAddingPost}>등록</Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v) => (\r\n          <div key={v} style={{ display: 'inline-block' }}>\r\n            <img src={`http://localhost:3000/${v}`} style={{ width: '200px' }} alt={v} />\r\n            <div>\r\n              <Button>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}