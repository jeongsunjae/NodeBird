{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport AppLayout from '../components/AppLayout';\nimport PropTypes from 'prop-types';\nimport withRedex from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport reducer from '../reducers';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\n\nvar NodeBird = function NodeBird(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/4.0.4/antd.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    charset: \"UTF-8\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n}; //getInitialProps를 사용할 수 있게 하는 사전 작업\n\nNodeBird.getInitialProps = function _callee(context) {\n  var ctx, Component, pageProps, cookie, state;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ctx = context.ctx, Component = context.Component;\n          console.log(ctx);\n          pageProps = {};\n          cookie = ctx.isServer ? ctx.req.headers.cookie : '';\n\n          if (ctx.isServer && cookie) {\n            axios.defaults.headers.Cookie = cookie;\n          }\n\n          state = ctx.store.getState();\n\n          if (!state.user.me) {\n            ctx.store.dispatch({\n              type: LOAD_USER_REQUEST\n            });\n          }\n\n          if (!Component.getInitialProps) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(Component.getInitialProps(ctx));\n\n        case 10:\n          pageProps = _context.sent;\n\n        case 11:\n          return _context.abrupt(\"return\", {\n            pageProps: pageProps\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, function (store) {\n    return function (next) {\n      return function (action) {\n        console.log(action);\n        next(action);\n      };\n    };\n  }];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer); //withReduxSaga할 때 필요\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; //redux를 사용하기 위해 store를 사용해야하는데 그 store를 만들어주는 부분\n\n\nexport default withRedex(configureStore)(withReduxSaga(NodeBird));","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/pages/_app.js"],"names":["React","Head","AppLayout","PropTypes","withRedex","withReduxSaga","reducer","Provider","createStore","compose","applyMiddleware","createSagaMiddleware","rootSaga","LOAD_USER_REQUEST","axios","NodeBird","Component","store","pageProps","propTypes","elementType","isRequired","object","getInitialProps","context","ctx","console","log","cookie","isServer","req","headers","defaults","Cookie","state","getState","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","next","action","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PropTypes  from 'prop-types';\r\nimport withRedex from 'next-redux-wrapper';\r\nimport withReduxSaga from 'next-redux-saga';\r\nimport reducer from '../reducers';\r\nimport {Provider} from 'react-redux'\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\nconst NodeBird = ({Component, store, pageProps}) => {\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            <Head>\r\n                <title>NodeBird</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/4.0.4/antd.css\" />\r\n                <link rel=\"stylesheet\" type=\"text/css\" charset=\"UTF-8\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\r\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\r\n            </Head>\r\n            <AppLayout>\r\n                <Component {...pageProps} />\r\n            </AppLayout>\r\n        </Provider>\r\n    )\r\n};\r\n\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType.isRequired,\r\n    store: PropTypes.object.isRequired,\r\n    pageProps: PropTypes.object.isRequired,\r\n};\r\n\r\n//getInitialProps를 사용할 수 있게 하는 사전 작업\r\nNodeBird.getInitialProps = async (context) => {\r\n\r\n    const { ctx, Component } = context;\r\n    console.log(ctx);\r\n    let pageProps = {};\r\n\r\n    const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\r\n\r\n    if(ctx.isServer && cookie)\r\n    {\r\n      axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    \r\n    const state = ctx.store.getState();\r\n    if(!state.user.me){\r\n      ctx.store.dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n      });\r\n    }\r\n\r\n    if (Component.getInitialProps) {\r\n      pageProps = await Component.getInitialProps(ctx);\r\n    }\r\n\r\n    //컴포넌트의 프롭스\r\n    return { pageProps };\r\n  };\r\n\r\nconst configureStore = (initialState, options)=>{\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware, (store)=>(next)=>(action)=> {\r\n      console.log(action);\r\n      next(action);\r\n    }];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n        applyMiddleware(...middlewares),\r\n        !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n      );\r\n    const store = createStore(reducer,initialState,enhancer);\r\n    //withReduxSaga할 때 필요\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n}\r\n\r\n//redux를 사용하기 위해 store를 사용해야하는데 그 store를 만들어주는 부분\r\nexport default withRedex(configureStore)(withReduxSaga(NodeBird));"]},"metadata":{},"sourceType":"module"}