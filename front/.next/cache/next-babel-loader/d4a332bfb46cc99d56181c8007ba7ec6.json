{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, UNLIKE_POST_FAILURE, UNLIKE_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnLikePost)]);\n}","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_COMMENTS_FAILURE","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","UNLIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","addCommentAPI","postId","content","addComment","comment","console","watchAddComment","loadCommentsAPI","loadComments","comments","watchLoadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePost","likePostAPI","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","postSaga","watchUnLikePost"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_FAILURE,\r\n  LOAD_HASHTAG_POSTS_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_COMMENTS_FAILURE,\r\n  LOAD_COMMENTS_SUCCESS,\r\n  LOAD_COMMENTS_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_FAILURE,\r\n  UNLIKE_POST_SUCCESS,\r\n} from '../reducers/post';\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI() {\r\n  return axios.get('/posts');\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n  try {\r\n    const result = yield call(loadMainPostsAPI);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\n\r\n\r\nfunction loadHashtagPostsAPI(tag) {\r\n  return axios.get(`/hashtag/${tag}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\n\r\nfunction loadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) {\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\n\r\nfunction uploadImagesAPI(formData) {\r\n  return axios.post(`/post/images`, formData,{\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\n\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}/like`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\n\r\n\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnLikePost),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}