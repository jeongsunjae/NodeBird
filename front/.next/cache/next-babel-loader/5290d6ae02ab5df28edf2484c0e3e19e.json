{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '정선재'\n    },\n    content: '첫 번째 게시글',\n    img: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n  }],\n  // 화면에 보일 포스트\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: false,\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  //포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false\n};\nconst dummyPost = {\n  id: 2,\n  User: {\n    id: 1,\n    nickname: '정선재'\n  },\n  content: '나는 더미입니다.',\n  Comments: []\n};\nconst dummyComment = {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: '정선재'\n  },\n  content: '더미 댓글입니다.'\n};\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [dummyPost, ...state.mainPosts],\n          postAdded: true\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        console.log(action.data.postId);\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        console.log(postIndex);\n        const post = state.mainPosts[postIndex];\n        const Comments = [...post.Comments, dummyComment];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: []\n        });\n      }\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: action.data\n        });\n      }\n\n    case LOAD_MAIN_POSTS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","img","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","dummyPost","Comments","dummyComment","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","state","action","type","error","console","log","data","postId","postIndex","findIndex","v","post"],"mappings":"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","sourcesContent":["export const initialState= {\r\n    mainPosts: [{\r\n      id: 1,\r\n        User: {\r\n          id: 1,\r\n          nickname: '정선재',\r\n        },\r\n        content: '첫 번째 게시글',\r\n        img: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n      }], // 화면에 보일 포스트\r\n      imagePaths: [], // 미리보기 이미지 경로\r\n      addPostErrorReason: false, // 포스트 업로드 실패 사유\r\n      isAddingPost: false, //포스트 업로드 중\r\n      postAdded: false, // 포스트 업로드 성공\r\n      isAddingComment: false,\r\n      addCommentErrorReason: '',\r\n      commentAdded: false,\r\n\r\n};\r\n\r\nconst dummyPost = {\r\n  id: 2,\r\n  User: {\r\n    id: 1,\r\n    nickname: '정선재',\r\n  },\r\n  content: '나는 더미입니다.',\r\n  Comments: [],\r\n};\r\n\r\nconst dummyComment = {\r\n  id: 1,\r\n  User: {\r\n    id: 1,\r\n    nickname: '정선재',\r\n  },\r\n  content: '더미 댓글입니다.',\r\n};\r\n\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST: {\r\n      return {\r\n        ...state,\r\n        isAddingPost: true,\r\n        addPostErrorReason: '',\r\n        postAdded: false,\r\n      };\r\n    }\r\n    case ADD_POST_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAddingPost: false,\r\n        mainPosts: [dummyPost, ...state.mainPosts],\r\n        postAdded: true,\r\n      };\r\n    }\r\n    case ADD_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n        isAddingPost: false,\r\n        addPostErrorReason: action.error,\r\n      };\r\n    }\r\n    case ADD_COMMENT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        isAddingComment: true,\r\n        addCommentErrorReason: '',\r\n        commentAdded: false,\r\n      };\r\n    }\r\n    case ADD_COMMENT_SUCCESS: {\r\n      console.log(action.data.postId);\r\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n      console.log(postIndex);\r\n      const post = state.mainPosts[postIndex];\r\n      const Comments = [...post.Comments, dummyComment];\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = { ...post, Comments };\r\n\r\n      return {\r\n        ...state,\r\n        isAddingComment: false,\r\n        mainPosts,\r\n        commentAdded: true,\r\n      };\r\n    }\r\n    case ADD_COMMENT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        isAddingComment: false,\r\n        addCommentErrorReason: action.error,\r\n      };\r\n    }\r\n    case LOAD_MAIN_POSTS_REQUEST: {\r\n      return {\r\n        ...state,\r\n        mainPosts: [],\r\n      };\r\n    }\r\n    case LOAD_MAIN_POSTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        mainPosts: action.data,\r\n      };\r\n    }\r\n    case LOAD_MAIN_POSTS_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    default: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}