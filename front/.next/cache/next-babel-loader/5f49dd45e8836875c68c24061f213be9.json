{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport AppLayout from '../components/AppLayout';\nimport PropTypes from 'prop-types';\nimport withRedex from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport reducer from '../reducers';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\nimport { Helmet } from 'react-helmet';\nimport { Container } from 'next/app';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return __jsx(Container, null, __jsx(Provider, {\n    store: store\n  }, __jsx(Helmet, {\n    title: \"NodeBird\",\n    htmlAttributes: {\n      lang: 'ko'\n    },\n    meta: [{\n      charset: 'UTF-8'\n    }, {\n      name: 'viewport',\n      content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover'\n    }, {\n      'http-equiv': 'X-UA-Compatible',\n      content: 'IE=edge'\n    }, {\n      name: 'description',\n      content: ' NodeBird SNS'\n    }, {\n      name: 'og:title',\n      content: 'NodeBird'\n    }, {\n      name: 'og:description',\n      content: 'NodeBird SNS'\n    }, {\n      property: 'og:type',\n      content: 'website'\n    }, {\n      property: 'og:image',\n      content: 'http://localhost:3060/favicon.ico'\n    }],\n    link: [{\n      rel: 'shortcut icon',\n      href: '/favicon.ico'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css'\n    }]\n  }), __jsx(AppLayout, null, __jsx(Component, pageProps))));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n}; //getInitialProps를 사용할 수 있게 하는 사전 작업\n\nNodeBird.getInitialProps = async context => {\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\n\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  const state = ctx.store.getState();\n\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = (await Component.getInitialProps(ctx)) || {};\n  } //컴포넌트의 프롭스\n\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, store => next => action => {\n    console.log(action);\n    next(action);\n  }];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer); //withReduxSaga할 때 필요\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; //redux를 사용하기 위해 store를 사용해야하는데 그 store를 만들어주는 부분\n\n\nexport default withRedex(configureStore)(withReduxSaga(NodeBird));","map":null,"metadata":{},"sourceType":"module"}