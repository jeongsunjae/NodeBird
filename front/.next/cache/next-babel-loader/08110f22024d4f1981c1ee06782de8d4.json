{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport { TwitterOutlined, LikeOutlined, MailOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PostImages from './PostImages';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    //e.preventDefault();\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인 필요');\n    }\n\n    if (liked) {\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      tpye: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(TwitterOutlined, null), __jsx(LikeOutlined, {\n      theme: liked ? \"twoTone\" : \"outlined\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(MailOutlined, {\n      onClick: onToggleComment\n    }), __jsx(EllipsisOutlined, null)],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: \"/hashtag/\".concat(v.slice(1)),\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uBC84\\uD2BC\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Icon","Input","List","Link","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","TwitterOutlined","LikeOutlined","MailOutlined","EllipsisOutlined","PostImages","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","tpye","createdAt","Images","pathname","query","User","nickname","split","map","match","tag","slice","Comments","length","item","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport {TwitterOutlined,LikeOutlined,MailOutlined,EllipsisOutlined } from '@ant-design/icons';\r\nimport PostImages from './PostImages';\r\n\r\nconst PostCard = ({ post }) => {\r\n\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const {me} = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n    if (!commentFormOpened) {\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) => {\r\n    //e.preventDefault();\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id, commentText]);\r\n\r\n  useEffect(() => {\r\n    setCommentText('');\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback((e) => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n  \r\n  const onToggleLike = useCallback(() => {\r\n    if(!me)\r\n    {\r\n      return alert('로그인 필요');\r\n    }\r\n\r\n    if(liked)\r\n    {\r\n      dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }else \r\n    {\r\n        dispatch({\r\n          type: LIKE_POST_REQUEST,\r\n          data: post.id\r\n        });\r\n    }\r\n  }, [me &&  me.id , post && post.id, liked]);\r\n\r\n  const onRetweet = useCallback(()=>{\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n\r\n    return dispatch({\r\n      tpye:RETWEET_REQUEST,\r\n      data: post.id,\r\n\r\n    });\r\n\r\n  },[]);\r\n  \r\n  return (\r\n    <div>\r\n    <Card\r\n      key={+post.createdAt}\r\n      cover={post.Images  && post.Images[0] && <PostImages images={post.Images} />}\r\n      actions={[\r\n        <TwitterOutlined />,\r\n        <LikeOutlined theme={(liked ? \"twoTone\" : \"outlined\")} twoToneColor=\"#eb2f96\" onClick={onToggleLike}/>,\r\n        <MailOutlined onClick={onToggleComment}/>,\r\n        <EllipsisOutlined />,\r\n      ]}\r\n      extra={<Button>팔로우</Button>}\r\n    >\r\n      <Card.Meta\r\n        avatar={(\r\n        <Link href={{pathname: '/user', query: {id: post.User.id}}} as={`/user/${post.User.id}`}>\r\n          <a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>\r\n        )}\r\n        title={post.User.nickname}\r\n        description={(\r\n          <div>\r\n            {post.content.split(/(#[^\\s]+)/g).map((v)=> {\r\n            if(v.match(/#[^\\s]+/)) {\r\n              return (\r\n                <Link href={{pathname: '/hashtag', query:{tag: v.slice(1)}}} as={`/hashtag/${v.slice(1)}`}  key={v}><a>{v}</a></Link>\r\n              );\r\n            }\r\n            return v;\r\n          })}\r\n          </div>\r\n        )}\r\n      />\r\n    </Card>\r\n    {commentFormOpened && (\r\n        <>\r\n          <Form onFinish={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>버튼</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Link href={{pathname: '/user', query: {id: item.User.id}}} as={`user/${item.User.id}`}>\r\n                    \r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n  }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}