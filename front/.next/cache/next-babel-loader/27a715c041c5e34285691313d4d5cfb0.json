{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post';\nimport { TwitterOutlined, LikeOutlined, MailOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport { text } from 'express';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    // e.preventDefault();\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img\n    }),\n    actions: [__jsx(TwitterOutlined, null), __jsx(LikeOutlined, null), __jsx(MailOutlined, {\n      onClick: onToggleComment\n    }), __jsx(EllipsisOutlined, null)],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: \"/hashtag/\".concat(v.slice(1)),\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uBC84\\uD2BC\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Icon","Input","List","Link","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","TwitterOutlined","LikeOutlined","MailOutlined","EllipsisOutlined","text","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","prev","type","data","id","onSubmitComment","e","alert","postId","content","onChangeCommentText","target","value","createdAt","img","pathname","query","User","nickname","split","map","v","match","tag","slice","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post';\r\nimport {TwitterOutlined,LikeOutlined,MailOutlined,EllipsisOutlined } from '@ant-design/icons';\r\nimport { text } from 'express';\r\n\r\nconst PostCard = ({ post }) => {\r\n\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const {me} = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n    if (!commentFormOpened) {\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) => {\r\n    // e.preventDefault();\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id, commentText]);\r\n\r\n  useEffect(() => {\r\n    setCommentText('');\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback((e) => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n    <Card\r\n      key={+post.createdAt}\r\n      cover={post.img && <img alt=\"example\" src={post.img} />}\r\n      actions={[\r\n        <TwitterOutlined />,\r\n        <LikeOutlined />,\r\n        <MailOutlined onClick={onToggleComment}/>,\r\n        <EllipsisOutlined />,\r\n      ]}\r\n      extra={<Button>팔로우</Button>}\r\n    >\r\n      <Card.Meta\r\n        avatar={(\r\n        <Link href={{pathname: '/user', query: {id: post.User.id}}} as={`/user/${post.User.id}`}>\r\n          <a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>\r\n        )}\r\n        title={post.User.nickname}\r\n        description={(\r\n          <div>\r\n            {post.content.split(/(#[^\\s]+)/g).map((v)=> {\r\n            if(v.match(/#[^\\s]+/)) {\r\n              return (\r\n                <Link href={{pathname: '/hashtag', query:{tag: v.slice(1)}}} as={`/hashtag/${v.slice(1)}`}  key={v}><a>{v}</a></Link>\r\n              );\r\n            }\r\n            return v;\r\n          })}\r\n          </div>\r\n        )}\r\n      />\r\n    </Card>\r\n    {commentFormOpened && (\r\n        <>\r\n          <Form onFinish={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>버튼</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Link href={{pathname: '/user', query: {id: item.User.id}}} as={`user/${item.User.id}`}>\r\n                    \r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n  }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}