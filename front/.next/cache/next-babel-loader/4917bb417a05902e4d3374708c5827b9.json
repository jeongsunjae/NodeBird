{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: '',\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false,\n  hasMorePost: false\n};\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        {\n          break;\n        }\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          action.data.forEach(p => {\n            draft.imagePaths.push(p);\n          });\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        {\n          break;\n        }\n\n      case REMOVE_IMAGE:\n        {\n          const index = draft.imagePaths.findIndex((v, i) => i === action.index);\n          draft.imagePaths.splice(index, 1);\n          break;\n        }\n\n      case ADD_POST_REQUEST:\n        {\n          draft.isAddingPost = true;\n          draft.addCommentErrorReason = '';\n          draft.postAdded = false;\n          break;\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.isAddingPost = false;\n          draft.mainPosts.unshift(action.data);\n          draft.postAdded = true;\n          draft.imagePaths = [];\n          break;\n        }\n\n      case ADD_POST_FAILURE:\n        {\n          draft.isAddingPost = false;\n          draft.addPostErrorReason = action.error;\n          break;\n        }\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.isAddingComment = true;\n          draft.addCommentErrorReason = '';\n          draft.commentAdded = false;\n          break;\n        }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Comments.push(action.data.comment);\n          draft.isAddingComment = false;\n          draft.commentAdded = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        {\n          draft.isAddingComment = false;\n          draft.addingPostErrorReason = action.error;\n          break;\n        }\n\n      case LOAD_COMMENTS_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Comments = action.data.comments;\n          break;\n        }\n\n      case LOAD_MAIN_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST:\n        {\n          draft.mainPosts = !action.lastId ? [] : draft.mainPosts;\n          draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\n          break;\n        }\n\n      case LOAD_MAIN_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_USER_POSTS_SUCCESS:\n        {\n          action.data.forEach(d => {\n            draft.mainPosts.push(d);\n          });\n          draft.hasMorePost = action.data.length === 10;\n          break;\n        }\n\n      case LOAD_MAIN_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_USER_POSTS_FAILURE:\n        {\n          break;\n        }\n\n      case LIKE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case LIKE_POST_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Likers.unshift({\n            id: action.data.userId\n          });\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case UNLIKE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v => v.id === action.data.userId);\n          draft.mainPosts[postIndex].Likers.splice(likeIndex, 1);\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case RETWEET_REQUEST:\n        {\n          break;\n        }\n\n      case RETWEET_SUCCESS:\n        {\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        {\n          break;\n        }\n\n      case REMOVE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          const index = draft.mainPosts.findIndex(v => v.id === action.data);\n          draft.mainPosts.splice(index, 1);\n          break;\n        }\n\n      case REMOVE_POST_FAILURE:\n        {\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","hasMorePost","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","state","action","draft","type","data","forEach","p","push","index","findIndex","v","i","splice","unshift","error","postIndex","id","postId","Comments","comment","addingPostErrorReason","comments","lastId","d","length","Likers","userId","likeIndex"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [], // 화면에 보일 포스트들\r\n  imagePaths: [], // 미리보기 이미지 경로\r\n  addPostErrorReason: '', // 포스트 업로드 실패 사유\r\n  isAddingPost: false, // 포스트 업로드 중\r\n  postAdded: false, // 포스트 업로드 성공\r\n  isAddingComment: false,\r\n  addCommentErrorReason: '',\r\n  commentAdded: false,\r\n  hasMorePost: false,\r\n};\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport default (state = initialState, action) => {\r\n  return produce(state, (draft)=> {\r\n    switch (action.type) {\r\n      case UPLOAD_IMAGES_REQUEST: {\r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_SUCCESS: {\r\n        \r\n        action.data.forEach((p)=>{\r\n          draft.imagePaths.push(p);\r\n        })\r\n        \r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_FAILURE: {\r\n        break;\r\n      }\r\n      case REMOVE_IMAGE: {\r\n        const index = draft.imagePaths.findIndex((v,i)=> i === action.index);\r\n        draft.imagePaths.splice(index,1);\r\n        break;\r\n      }\r\n      case ADD_POST_REQUEST: {\r\n        draft.isAddingPost = true;\r\n        draft.addCommentErrorReason = '';\r\n        draft.postAdded = false;\r\n\r\n        break;\r\n      }\r\n      case ADD_POST_SUCCESS: {\r\n        draft.isAddingPost = false;\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.postAdded = true;\r\n        draft.imagePaths= [];\r\n\r\n        break;\r\n      }\r\n      case ADD_POST_FAILURE: {\r\n          draft.isAddingPost = false;\r\n          draft.addPostErrorReason = action.error;\r\n          break;\r\n      }\r\n      case ADD_COMMENT_REQUEST: {\r\n        draft.isAddingComment = true;\r\n        draft.addCommentErrorReason = '';\r\n        draft.commentAdded = false;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n        draft.mainPosts[postIndex].Comments.push(action.data.comment);\r\n        draft.isAddingComment = false;\r\n        draft.commentAdded = true;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE: {\r\n        draft.isAddingComment = false;\r\n        draft.addingPostErrorReason = action.error;\r\n        break;\r\n      }\r\n      case LOAD_COMMENTS_SUCCESS: {\r\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n        draft.mainPosts[postIndex].Comments = action.data.comments;\r\n        break;\r\n      }\r\n      case LOAD_MAIN_POSTS_REQUEST:\r\n      case LOAD_HASHTAG_POSTS_REQUEST:\r\n      case LOAD_USER_POSTS_REQUEST: {\r\n        draft.mainPosts = !action.lastId ? [] : draft.mainPosts;\r\n        draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\r\n        break;\r\n      }\r\n      case LOAD_MAIN_POSTS_SUCCESS:\r\n      case LOAD_HASHTAG_POSTS_SUCCESS:\r\n      case LOAD_USER_POSTS_SUCCESS: {\r\n        action.data.forEach((d) => {\r\n          draft.mainPosts.push(d);\r\n        });\r\n        draft.hasMorePost = action.data.length === 10;\r\n        break;\r\n      }\r\n      case LOAD_MAIN_POSTS_FAILURE:\r\n      case LOAD_HASHTAG_POSTS_FAILURE:\r\n      case LOAD_USER_POSTS_FAILURE: {\r\n        break;\r\n      }\r\n  \r\n      case LIKE_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case LIKE_POST_SUCCESS: {\r\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n        draft.mainPosts[postIndex].Likers.unshift({ id: action.data.userId });\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE: {\r\n        break;\r\n      }\r\n  \r\n      case UNLIKE_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n        const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v => v.id === action.data.userId);\r\n        draft.mainPosts[postIndex].Likers.splice(likeIndex, 1);\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE: {\r\n        break;\r\n      }\r\n  \r\n      case RETWEET_REQUEST: {\r\n        break;\r\n      }\r\n      case RETWEET_SUCCESS: {\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      }\r\n      case RETWEET_FAILURE: {\r\n        break;\r\n      }\r\n  \r\n      case REMOVE_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case REMOVE_POST_SUCCESS: {\r\n        const index = draft.mainPosts.findIndex(v => v.id === action.data);\r\n        draft.mainPosts.splice(index, 1);\r\n        break;\r\n      }\r\n      case REMOVE_POST_FAILURE: {\r\n        break;\r\n      }\r\n  \r\n  \r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n \r\n};"]},"metadata":{},"sourceType":"module"}