{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, memo } from 'react';\nimport { Avatar, Button, Card, Comment, List, Popover } from 'antd';\nimport Link from 'next/link';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { TwitterOutlined, LikeOutlined, MailOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport CommentForm from '../container/CommentForm';\nimport FollowButton from '../components/FollowButton';\nmoment.locale('ko');\nconst CardWrapper = styled.div`\n  margin-bottom: 20px;\n`;\nconst PostCard = memo(({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const id = useSelector(state => state.user.me && state.user.me.id);\n  const dispatch = useDispatch();\n  const liked = id && post.Likers && post.Likers.find(v => v.id === id);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onToggleLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인 필요');\n    }\n\n    if (liked) {\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id, post && post.id]);\n  const onFollow = useCallback(userId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onUnfollow = useCallback(userId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onRemovePost = useCallback(postId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: postId\n    });\n  });\n  return __jsx(CardWrapper, null, __jsx(Card, {\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(TwitterOutlined, {\n      onClick: onRetweet\n    }), __jsx(LikeOutlined, {\n      theme: liked ? \"twoTone\" : \"outlined\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(MailOutlined, {\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, id && post.UserId === id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(EllipsisOutlined, null))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n    extra: __jsx(FollowButton, {\n      post: post,\n      onUnfollow: onUnfollow,\n      onFollow: onFollow\n    })\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  }), moment(post.createAt).format('YYYY.mm.dd')) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n});\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/container/PostCard.js"],"names":["React","useCallback","useState","memo","Avatar","Button","Card","Comment","List","Popover","Link","useDispatch","useSelector","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","TwitterOutlined","LikeOutlined","MailOutlined","EllipsisOutlined","PostImages","PostCardContent","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","styled","moment","CommentForm","FollowButton","locale","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","id","state","user","me","dispatch","liked","Likers","find","v","onToggleComment","prev","type","data","onToggleLike","alert","onRetweet","onFollow","userId","onUnfollow","onRemovePost","postId","Images","UserId","RetweetId","User","nickname","Retweet","pathname","query","content","createAt","format","Comments","length","item"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, memo } from 'react';\r\nimport { Avatar, Button, Card, Comment ,List, Popover  } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { \r\n  ADD_COMMENT_REQUEST,\r\n   LOAD_COMMENTS_REQUEST, \r\n   UNLIKE_POST_REQUEST, \r\n   LIKE_POST_REQUEST, \r\n   RETWEET_REQUEST, \r\n   REMOVE_POST_REQUEST } from '../reducers/post';\r\nimport {TwitterOutlined,LikeOutlined,MailOutlined,EllipsisOutlined } from '@ant-design/icons';\r\nimport PostImages from '../components/PostImages';\r\nimport PostCardContent from '../components/PostCardContent';\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\r\nimport styled from 'styled-components';\r\nimport moment from 'moment';\r\nimport CommentForm from '../container/CommentForm';\r\nimport FollowButton from '../components/FollowButton';\r\n\r\nmoment.locale('ko');\r\n\r\nconst CardWrapper = styled.div`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst PostCard = memo(({ post }) => {\r\n\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const id = useSelector(state => state.user.me && state.user.me.id);\r\n  const dispatch = useDispatch();\r\n\r\n  const liked = id && post.Likers && post.Likers.find(v => v.id === id);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n    if (!commentFormOpened) {\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, []);\r\n  \r\n  const onToggleLike = useCallback(() => {\r\n    if(!id)\r\n    {\r\n      return alert('로그인 필요');\r\n    }\r\n\r\n    if(liked)\r\n    {\r\n      dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }else \r\n    {\r\n        dispatch({\r\n          type: LIKE_POST_REQUEST,\r\n          data: post.id\r\n        });\r\n    }\r\n  }, [id , post && post.id, liked]);\r\n\r\n  const onRetweet = useCallback(()=>{\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n\r\n    return dispatch({\r\n      type:RETWEET_REQUEST,\r\n      data: post.id,\r\n\r\n    });\r\n\r\n  },[id,post && post.id]);\r\n\r\n  const onFollow= useCallback(userId => () => {\r\n    dispatch({\r\n      type: FOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  },[]);\r\n\r\n  const onUnfollow = useCallback(userId => () => {\r\n    dispatch({\r\n      type: UNFOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  },[]);\r\n\r\n  const onRemovePost = useCallback(postId => ()=> {\r\n    dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: postId,\r\n    });\r\n  })\r\n\r\n  return (\r\n    <CardWrapper>\r\n    <Card\r\n      cover={post.Images  && post.Images[0] && <PostImages images={post.Images} />}\r\n      actions={[\r\n        <TwitterOutlined onClick={onRetweet}/>,\r\n        <LikeOutlined theme={(liked ? \"twoTone\" : \"outlined\")} twoToneColor=\"#eb2f96\" onClick={onToggleLike}/>,\r\n        <MailOutlined onClick={onToggleComment}/>,\r\n        <Popover\r\n        key=\"ellipsis\"\r\n        content={(\r\n          <Button.Group>\r\n            {id && post.UserId === id\r\n              ? (\r\n                <>\r\n                  <Button>수정</Button>\r\n                  <Button type=\"danger\" onClick={onRemovePost(post.id)}>삭제</Button>\r\n                </>\r\n              )\r\n              : <Button>신고</Button>}\r\n          </Button.Group>\r\n        )}\r\n      >\r\n        <EllipsisOutlined />\r\n      </Popover>,\r\n      ]}\r\n      title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n      extra={<FollowButton post={post} onUnfollow={onUnfollow} onFollow={onFollow}/>}\r\n    >\r\n      {post.RetweetId && post.Retweet ?\r\n      (\r\n      <Card\r\n      cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n      >\r\n         <Card.Meta\r\n          avatar={(\r\n          <Link href={{pathname: '/user', query: {id: post.User.id}}} as={`/user/${post.User.id}`}>\r\n            <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>\r\n          )}\r\n          title={post.Retweet.User.nickname}\r\n          description={<PostCardContent postData={post.Retweet.content} />}\r\n        />\r\n        {moment(post.createAt).format('YYYY.mm.dd')}\r\n      </Card>\r\n      )\r\n      :\r\n      (\r\n      <Card.Meta\r\n        avatar={(\r\n        <Link href={{pathname: '/user', query: {id: post.User.id}}} as={`/user/${post.User.id}`}>\r\n          <a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>\r\n        )}\r\n        title={post.User.nickname}\r\n        description={<PostCardContent postData={post.content} />}\r\n      />\r\n      )\r\n        }\r\n    </Card>\r\n    {commentFormOpened && (\r\n        <>\r\n          <CommentForm post={post}/>\r\n\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Link href={{pathname: '/user', query: {id: item.User.id}}} as={`user/${item.User.id}`}>\r\n                    \r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </CardWrapper>\r\n  );\r\n});\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}