{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport AppLayout from '../components/AppLayout';\nimport PropTypes from 'prop-types';\nimport withRedex from 'next-redux-wrapper';\nimport reducer from '../reducers';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\n\nconst NodeBird = ({\n  Component,\n  store\n}) => {\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/4.0.4/antd.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, null)));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired\n}; //getInitialProps를 사용할 수 있게 하는 사전 작업\n\nNodeBird.getInitialProps = async context => {\n  console.log(context);\n  const {\n    ctx\n  } = context;\n  let pageProps = {};\n\n  if (context.Component.getInitialProps) {\n    await context.Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n}; //redux를 사용하기 위해 store를 사용해야하는데 그 store를 만들어주는 부분\n\n\nexport default withRedex(configureStore)(NodeBird);","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/pages/_app.js"],"names":["React","Head","AppLayout","PropTypes","withRedex","reducer","Provider","createStore","compose","applyMiddleware","createSagaMiddleware","rootSaga","NodeBird","Component","store","propTypes","elementType","isRequired","object","getInitialProps","context","console","log","ctx","pageProps","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,CAAD,KAAwB;AAErC,SACI,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEA;AAAjB,KACI,MAAC,IAAD,QACI,gCADJ,EAEI;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC;AAA5B,IAFJ,CADJ,EAKI,MAAC,SAAD,QACI,MAAC,SAAD,OADJ,CALJ,CADJ;AAWH,CAbD;;AAeAF,QAAQ,CAACG,SAAT,GAAqB;AACjBF,EAAAA,SAAS,EAAEV,SAAS,CAACa,WAAV,CAAsBC,UADhB;AAEjBH,EAAAA,KAAK,EAAEX,SAAS,CAACe,MAAV,CAAiBD;AAFP,CAArB,C,CAKA;;AACAL,QAAQ,CAACO,eAAT,GAA2B,MAAOC,OAAP,IAC3B;AACIC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAM;AAACG,IAAAA;AAAD,MAAQH,OAAd;AACA,MAAII,SAAS,GAAG,EAAhB;;AACA,MAAGJ,OAAO,CAACP,SAAR,CAAkBM,eAArB,EACA;AACI,UAAMC,OAAO,CAACP,SAAR,CAAkBM,eAAlB,CAAkCI,GAAlC,CAAN;AACH;;AAED,SAAO;AAACC,IAAAA;AAAD,GAAP;AACH,CAXD;;AAaA,MAAMC,cAAc,GAAG,CAACC,YAAD,EAAeC,OAAf,KAAyB;AAC5C,QAAMC,cAAc,GAAGlB,oBAAoB,EAA3C;AACA,QAAMmB,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GAAG,QACbtB,OAAO,CAACC,eAAe,CAAC,GAAGoB,WAAJ,CAAhB,CADM,GAEbrB,OAAO,CACPC,eAAe,CAAC,GAAGoB,WAAJ,CADR,EAEP,CAACF,OAAO,CAACI,QAAT,IAAqB,OAAOC,MAAM,CAACC,4BAAd,KAA+C,WAApE,GAAkFD,MAAM,CAACC,4BAAP,EAAlF,GAA0HC,CAAC,IAAIA,CAFxH,CAFX;AAMA,QAAMpB,KAAK,GAAGP,WAAW,CAACF,OAAD,EAASqB,YAAT,EAAsBI,QAAtB,CAAzB;AACAF,EAAAA,cAAc,CAACO,GAAf,CAAmBxB,QAAnB;AACA,SAAOG,KAAP;AACH,CAZD,C,CAcA;;;AACA,eAAeV,SAAS,CAACqB,cAAD,CAAT,CAA0Bb,QAA1B,CAAf","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PropTypes  from 'prop-types';\r\nimport withRedex from 'next-redux-wrapper';\r\nimport reducer from '../reducers';\r\nimport {Provider} from 'react-redux'\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\n\r\nconst NodeBird = ({Component, store}) => {\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            <Head>\r\n                <title>NodeBird</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/4.0.4/antd.css\" />\r\n            </Head>\r\n            <AppLayout>\r\n                <Component />\r\n            </AppLayout>\r\n        </Provider>\r\n    )\r\n};\r\n\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType.isRequired,\r\n    store: PropTypes.object.isRequired,\r\n};\r\n\r\n//getInitialProps를 사용할 수 있게 하는 사전 작업\r\nNodeBird.getInitialProps = async( context ) => \r\n{\r\n    console.log(context);\r\n    const {ctx} = context;\r\n    let pageProps = {};\r\n    if(context.Component.getInitialProps)\r\n    {\r\n        await context.Component.getInitialProps(ctx);\r\n    }\r\n\r\n    return {pageProps};\r\n};\r\n\r\nconst configureStore = (initialState, options)=>{\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n        applyMiddleware(...middlewares),\r\n        !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n      );\r\n    const store = createStore(reducer,initialState,enhancer);\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n}\r\n\r\n//redux를 사용하기 위해 store를 사용해야하는데 그 store를 만들어주는 부분\r\nexport default withRedex(configureStore)(NodeBird);"]},"metadata":{},"sourceType":"module"}