{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport PostCard from '../container/PostCard';\n\nvar User = function User() {\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  return __jsx(\"div\", null, userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", null), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: +c.createdAt,\n      post: c\n    });\n  }));\n};\n\nUser.getInitialProps = function _callee(context) {\n  var id;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = parseInt(context.query.id, 10);\n          console.log('user getInitialProps', id);\n          context.store.dispatch({\n            type: LOAD_USER_REQUEST,\n            data: id\n          });\n          context.store.dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            data: id\n          });\n          return _context.abrupt(\"return\", {\n            id: id\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default User;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/pages/user.js"],"names":["React","useSelector","Avatar","Card","LOAD_USER_POSTS_REQUEST","LOAD_USER_REQUEST","PostCard","User","state","post","mainPosts","user","userInfo","Posts","Followings","Followers","nickname","map","c","createdAt","getInitialProps","context","id","parseInt","query","console","log","store","dispatch","type","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,qBAEKN,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAFhB;AAAA,MAETC,SAFS,gBAETA,SAFS;;AAAA,sBAGIT,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAHf;AAAA,MAGTC,QAHS,iBAGTA,QAHS;;AAKjB,SACE,mBACGA,QAAQ,GAEL,MAAC,IAAD;AACE,IAAA,OAAO,EAAE,CACP;AAAK,MAAA,GAAG,EAAC;AAAT,uBAEE,iBAFF,EAGGA,QAAQ,CAACC,KAHZ,CADO,EAMP;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEE,iBAFF,EAGGD,QAAQ,CAACE,UAHZ,CANO,EAWP;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEE,iBAFF,EAGGF,QAAQ,CAACG,SAHZ,CAXO;AADX,KAmBE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,MAAM,EAAE,MAAC,MAAD,QAASH,QAAQ,CAACI,QAAT,CAAkB,CAAlB,CAAT,CADV;AAEE,IAAA,KAAK,EAAEJ,QAAQ,CAACI;AAFlB,IAnBF,CAFK,GA2BL,IA5BN,EA6BGN,SAAS,CAACO,GAAV,CAAc,UAAAC,CAAC;AAAA,WACd,MAAC,QAAD;AAAU,MAAA,GAAG,EAAE,CAACA,CAAC,CAACC,SAAlB;AAA6B,MAAA,IAAI,EAAED;AAAnC,MADc;AAAA,GAAf,CA7BH,CADF;AAmCD,CAxCD;;AA0CAX,IAAI,CAACa,eAAL,GAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfC,UAAAA,EAFe,GAEVC,QAAQ,CAACF,OAAO,CAACG,KAAR,CAAcF,EAAf,EAAkB,EAAlB,CAFE;AAIrBG,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCJ,EAApC;AAEAD,UAAAA,OAAO,CAACM,KAAR,CAAcC,QAAd,CAAuB;AACrBC,YAAAA,IAAI,EAAExB,iBADe;AAErByB,YAAAA,IAAI,EAAER;AAFe,WAAvB;AAIAD,UAAAA,OAAO,CAACM,KAAR,CAAcC,QAAd,CAAuB;AACrBC,YAAAA,IAAI,EAAEzB,uBADe;AAErB0B,YAAAA,IAAI,EAAER;AAFe,WAAvB;AAVqB,2CAed;AAAEA,YAAAA,EAAE,EAAFA;AAAF,WAfc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAkBA,eAAef,IAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\nimport { Avatar, Card } from 'antd';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport PostCard from '../container/PostCard';\r\n\r\nconst User = () => {\r\n  \r\n  const { mainPosts } = useSelector(state => state.post);\r\n  const { userInfo } = useSelector(state => state.user);\r\n\r\n  return (\r\n    <div>\r\n      {userInfo\r\n        ? (\r\n          <Card\r\n            actions={[\r\n              <div key=\"twit\">\r\n                짹짹\r\n                <br />\r\n                {userInfo.Posts}\r\n              </div>,\r\n              <div key=\"following\">\r\n                팔로잉\r\n                <br />\r\n                {userInfo.Followings}\r\n              </div>,\r\n              <div key=\"follower\">\r\n                팔로워\r\n                <br />\r\n                {userInfo.Followers}\r\n              </div>,\r\n            ]}\r\n          >\r\n            <Card.Meta\r\n              avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n              title={userInfo.nickname}\r\n            />\r\n          </Card>\r\n        )\r\n        : null}\r\n      {mainPosts.map(c => (\r\n        <PostCard key={+c.createdAt} post={c} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nUser.getInitialProps = async (context) => {\r\n\r\n  const id = parseInt(context.query.id,10);\r\n\r\n  console.log('user getInitialProps', id);\r\n\r\n  context.store.dispatch({\r\n    type: LOAD_USER_REQUEST,\r\n    data: id,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_USER_POSTS_REQUEST,\r\n    data: id,\r\n  });\r\n\r\n  return { id };\r\n};\r\n\r\nexport default User;"]},"metadata":{},"sourceType":"module"}