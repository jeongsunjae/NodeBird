{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useSelector } from \"react-redux\";\nimport PropsTypes from 'prop-types';\nimport { LOAD_POST_REQUEST } from \"../reducers/post\";\nimport { Helmet } from 'react-helmet';\n\nconst Post = ({\n  id\n}) => {\n  const {\n    singlePost\n  } = useSelector(state => state.post);\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    title: `${singlePost.User.nickname}님의 글`,\n    description: singlePost,\n    meta: [{\n      name: 'description',\n      content: singlePost.content\n    }, {\n      property: 'og:title',\n      content: `${singlePost}님의 게시글`\n    }, {\n      property: 'og:description',\n      content: singlePost.content\n    }, {\n      property: 'og:image',\n      content: singlePost.Images[0] && `http://localhost:3065/${singlePost.Images[0].src}`\n    }, {\n      property: 'og:url',\n      content: `http://localhost:3060/post/${id}`\n    }]\n  }), __jsx(\"div\", null, id), __jsx(\"div\", null, singlePost.content), __jsx(\"div\", null, singlePost.User.nickname), __jsx(\"div\", null, singlePost.Images[0] && __jsx(\"img\", {\n    src: `http://localhost:3065/${post.Images[0].src}`\n  })));\n};\n\nPost.getInitialProps = async context => {\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: context.query.id\n  });\n  return {\n    id: parseInt(context.query.id, 10)\n  };\n};\n\nPost.propsTypes = {\n  id: PropsTypes.number.isRequired\n};\nexport default Post;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/pages/post.js"],"names":["useSelector","PropsTypes","LOAD_POST_REQUEST","Helmet","Post","id","singlePost","state","post","User","nickname","name","content","property","Images","src","getInitialProps","context","store","dispatch","type","data","query","parseInt","propsTypes","number","isRequired"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAAQC,MAAR,QAAqB,cAArB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAU;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAiBN,WAAW,CAACO,KAAK,IAAEA,KAAK,CAACC,IAAd,CAAlC;AACA,SACI,4BACI,MAAC,MAAD;AACI,IAAA,KAAK,EAAG,GAAEF,UAAU,CAACG,IAAX,CAAgBC,QAAS,MADvC;AAEI,IAAA,WAAW,EAAEJ,UAFjB;AAGI,IAAA,IAAI,EAAE,CAAC;AACHK,MAAAA,IAAI,EAAE,aADH;AAEHC,MAAAA,OAAO,EAAEN,UAAU,CAACM;AAFjB,KAAD,EAIN;AACIC,MAAAA,QAAQ,EAAE,UADd;AAC0BD,MAAAA,OAAO,EAAG,GAAEN,UAAW;AADjD,KAJM,EAON;AACIO,MAAAA,QAAQ,EAAE,gBADd;AACgCD,MAAAA,OAAO,EAACN,UAAU,CAACM;AADnD,KAPM,EAUN;AACIC,MAAAA,QAAQ,EAAE,UADd;AAC0BD,MAAAA,OAAO,EAACN,UAAU,CAACQ,MAAX,CAAkB,CAAlB,KAAyB,yBAAwBR,UAAU,CAACQ,MAAX,CAAkB,CAAlB,EAAqBC,GAAI;AAD5G,KAVM,EAcN;AACIF,MAAAA,QAAQ,EAAC,QADb;AACwBD,MAAAA,OAAO,EAAE,8BAA6BP,EAAG;AADjE,KAdM;AAHV,IADJ,EAuBI,mBAAMA,EAAN,CAvBJ,EAwBI,mBAAMC,UAAU,CAACM,OAAjB,CAxBJ,EAyBI,mBAAMN,UAAU,CAACG,IAAX,CAAgBC,QAAtB,CAzBJ,EA0BI,mBACKJ,UAAU,CAACQ,MAAX,CAAkB,CAAlB,KAAwB;AAAK,IAAA,GAAG,EAAG,yBAAwBN,IAAI,CAACM,MAAL,CAAY,CAAZ,EAAeC,GAAI;AAAtD,IAD7B,CA1BJ,CADJ;AAgCH,CAlCD;;AAoCAX,IAAI,CAACY,eAAL,GAAuB,MAAMC,OAAN,IAAkB;AACrCA,EAAAA,OAAO,CAACC,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAElB,iBADa;AAEnBmB,IAAAA,IAAI,EAAEJ,OAAO,CAACK,KAAR,CAAcjB;AAFD,GAAvB;AAKA,SAAO;AAAEA,IAAAA,EAAE,EAAGkB,QAAQ,CAACN,OAAO,CAACK,KAAR,CAAcjB,EAAf,EAAmB,EAAnB;AAAf,GAAP;AACH,CAPD;;AASAD,IAAI,CAACoB,UAAL,GAAkB;AACdnB,EAAAA,EAAE,EAAEJ,UAAU,CAACwB,MAAX,CAAkBC;AADR,CAAlB;AAIA,eAAetB,IAAf","sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport PropsTypes from 'prop-types';\r\nimport { LOAD_POST_REQUEST } from \"../reducers/post\";\r\nimport {Helmet} from 'react-helmet';\r\n\r\nconst Post = ({id}) => {\r\n    const { singlePost } = useSelector(state=>state.post);\r\n    return (\r\n        <>\r\n            <Helmet \r\n                title={`${singlePost.User.nickname}님의 글`}\r\n                description={singlePost}\r\n                meta={[{\r\n                    name: 'description',\r\n                    content: singlePost.content,\r\n                },\r\n                {\r\n                    property: 'og:title', content: `${singlePost}님의 게시글`\r\n                },\r\n                {\r\n                    property: 'og:description', content:singlePost.content,\r\n                },\r\n                {\r\n                    property: 'og:image', content:singlePost.Images[0] && `http://localhost:3065/${singlePost.Images[0].src}`,\r\n\r\n                },\r\n                {\r\n                    property:'og:url' , content:`http://localhost:3060/post/${id}`,\r\n                }\r\n            ]}\r\n            />\r\n            <div>{id}</div>\r\n            <div>{singlePost.content}</div>\r\n            <div>{singlePost.User.nickname}</div>\r\n            <div>\r\n                {singlePost.Images[0] && <img src={`http://localhost:3065/${post.Images[0].src}`}/>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async(context) => {\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.query.id,\r\n    });\r\n\r\n    return { id : parseInt(context.query.id, 10)};\r\n};\r\n\r\nPost.propsTypes = {\r\n    id: PropsTypes.number.isRequired,\r\n};\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}