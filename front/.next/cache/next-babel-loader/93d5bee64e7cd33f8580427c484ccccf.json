{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, UNLIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, RETWEET_REQUEST, RETWEET_FAILURE, RETWEET_SUCCESS, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      // user 데이터를 수정\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id || 0}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction RemovePostAPI(postId) {\n  return axios.delete(`/post/${postId}`, {\n    withCredentials: true\n  });\n}\n\nfunction* RemovePost(action) {\n  try {\n    const result = yield call(RemovePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, RemovePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnLikePost), fork(watchRetweet), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_COMMENTS_FAILURE","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","UNLIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","RETWEET_REQUEST","RETWEET_FAILURE","RETWEET_SUCCESS","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","id","e","error","watchAddPost","loadMainPostsAPI","lastId","limit","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","addCommentAPI","postId","content","addComment","comment","console","watchAddComment","loadCommentsAPI","loadComments","comments","watchLoadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnLikePost","retweetAPI","retweet","alert","response","watchRetweet","RemovePostAPI","RemovePost","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_FAILURE,\r\n  LOAD_HASHTAG_POSTS_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_COMMENTS_FAILURE,\r\n  LOAD_COMMENTS_SUCCESS,\r\n  LOAD_COMMENTS_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_FAILURE,\r\n  UNLIKE_POST_SUCCESS,\r\n  RETWEET_REQUEST,\r\n  RETWEET_FAILURE,\r\n  RETWEET_SUCCESS,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n} from '../reducers/post';\r\n\r\nimport {ADD_POST_TO_ME,REMOVE_POST_OF_ME} from \"../reducers/user\"\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({ // user 데이터를 수정\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\r\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\r\n}\r\n\r\nfunction* loadMainPosts(action) {\r\n  try {\r\n    const result = yield call(loadMainPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\n\r\n\r\nfunction loadHashtagPostsAPI(tag,lastId) {\r\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\n\r\nfunction loadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id || 0}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) {\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\n\r\nfunction uploadImagesAPI(formData) {\r\n  return axios.post(`/post/images`, formData,{\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\n\r\n\r\nfunction likePostAPI(postId) {\r\n  return axios.post(`/post/${postId}/like`, {} ,{\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId\r\n      },\r\n    });\r\n  } catch (e) {\r\n   \r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}/like`,{\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId\r\n      },\r\n    });\r\n  } catch (e) {\r\n   \r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnLikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction retweetAPI(postId) {\r\n  return axios.post(`/post/${postId}/retweet`, {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    \r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: e,\r\n    });\r\n    alert(e.response && e.response.data);\r\n  }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction RemovePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* RemovePost(action) {\r\n  try {\r\n    const result = yield call(RemovePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type:REMOVE_POST_OF_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    \r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  \r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, RemovePost);\r\n}\r\n\r\n\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnLikePost),\r\n    fork(watchRetweet),\r\n    fork(watchRemovePost),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}