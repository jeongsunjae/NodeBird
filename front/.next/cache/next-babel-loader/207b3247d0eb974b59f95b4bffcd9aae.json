{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, Form, Input, List, Popover } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { TwitterOutlined, LikeOutlined, MailOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport styled from 'styled-components';\nvar CardWrapper = styled.div(_templateObject());\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    //e.preventDefault();\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인 필요');\n    }\n\n    if (liked) {\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemovePost = useCallback(function (postId) {\n    return function () {\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: postId\n      });\n    };\n  });\n  return __jsx(CardWrapper, null, __jsx(Card, {\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(TwitterOutlined, {\n      onClick: onRetweet\n    }), __jsx(LikeOutlined, {\n      theme: liked ? \"twoTone\" : \"outlined\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(MailOutlined, {\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, me && post.UserId === me.id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(EllipsisOutlined, null))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(function (v) {\n      return v.id === post.User.id;\n    }) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"\\uC5B8\\uD314\\uB85C\\uC6B0\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uBC84\\uD2BC\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Input","List","Popover","Link","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","TwitterOutlined","LikeOutlined","MailOutlined","EllipsisOutlined","PostImages","PostCardContent","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","styled","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","onFollow","userId","onUnfollow","onRemovePost","Images","UserId","RetweetId","User","nickname","Followings","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img","createdAt"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Avatar, Button, Card, Comment, Form, Input, List, Popover  } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\r\nimport {TwitterOutlined,LikeOutlined,MailOutlined,EllipsisOutlined } from '@ant-design/icons';\r\nimport PostImages from './PostImages';\r\nimport PostCardContent from './PostCardContent';\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\r\nimport styled from 'styled-components';\r\n\r\nconst CardWrapper = styled.div`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst PostCard = ({ post }) => {\r\n\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const {me} = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n    if (!commentFormOpened) {\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) => {\r\n    //e.preventDefault();\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id, commentText]);\r\n\r\n  useEffect(() => {\r\n    setCommentText('');\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback((e) => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n  \r\n  const onToggleLike = useCallback(() => {\r\n    if(!me)\r\n    {\r\n      return alert('로그인 필요');\r\n    }\r\n\r\n    if(liked)\r\n    {\r\n      dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }else \r\n    {\r\n        dispatch({\r\n          type: LIKE_POST_REQUEST,\r\n          data: post.id\r\n        });\r\n    }\r\n  }, [me &&  me.id , post && post.id, liked]);\r\n\r\n  const onRetweet = useCallback(()=>{\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n\r\n    return dispatch({\r\n      type:RETWEET_REQUEST,\r\n      data: post.id,\r\n\r\n    });\r\n\r\n  },[me,post && post.id]);\r\n\r\n  const onFollow= useCallback(userId => () => {\r\n    dispatch({\r\n      type: FOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  },[]);\r\n\r\n  const onUnfollow = useCallback(userId => () => {\r\n    dispatch({\r\n      type: UNFOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  },[]);\r\n\r\n  const onRemovePost = useCallback(postId => ()=> {\r\n    dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: postId,\r\n    });\r\n  })\r\n\r\n  return (\r\n    <CardWrapper>\r\n    <Card\r\n      cover={post.Images  && post.Images[0] && <PostImages images={post.Images} />}\r\n      actions={[\r\n        <TwitterOutlined onClick={onRetweet}/>,\r\n        <LikeOutlined theme={(liked ? \"twoTone\" : \"outlined\")} twoToneColor=\"#eb2f96\" onClick={onToggleLike}/>,\r\n        <MailOutlined onClick={onToggleComment}/>,\r\n        <Popover\r\n        key=\"ellipsis\"\r\n        content={(\r\n          <Button.Group>\r\n            {me && post.UserId === me.id\r\n              ? (\r\n                <>\r\n                  <Button>수정</Button>\r\n                  <Button type=\"danger\" onClick={onRemovePost(post.id)}>삭제</Button>\r\n                </>\r\n              )\r\n              : <Button>신고</Button>}\r\n          </Button.Group>\r\n        )}\r\n      >\r\n        <EllipsisOutlined />\r\n      </Popover>,\r\n      ]}\r\n      title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n      extra={!me || post.User.id === me.id\r\n         ?\r\n          null \r\n        : me.Followings && me.Followings.find(v => v.id === post.User.id)\r\n        ?\r\n          <Button onClick={onUnfollow(post.User.id)}>언팔로우</Button> \r\n        : <Button onClick={onFollow(post.User.id)}>팔로우</Button> \r\n    }\r\n    >\r\n      {post.RetweetId && post.Retweet ?\r\n      (\r\n      <Card\r\n      cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n      >\r\n         <Card.Meta\r\n          avatar={(\r\n          <Link href={{pathname: '/user', query: {id: post.User.id}}} as={`/user/${post.User.id}`}>\r\n            <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>\r\n          )}\r\n          title={post.Retweet.User.nickname}\r\n          description={<PostCardContent postData={post.Retweet.content} />}\r\n        />\r\n      </Card>\r\n      )\r\n      :\r\n      (\r\n      <Card.Meta\r\n        avatar={(\r\n        <Link href={{pathname: '/user', query: {id: post.User.id}}} as={`/user/${post.User.id}`}>\r\n          <a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>\r\n        )}\r\n        title={post.User.nickname}\r\n        description={<PostCardContent postData={post.content} />}\r\n      />\r\n      )\r\n        }\r\n    </Card>\r\n    {commentFormOpened && (\r\n        <>\r\n          <Form onFinish={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>버튼</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Link href={{pathname: '/user', query: {id: item.User.id}}} as={`user/${item.User.id}`}>\r\n                    \r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}