{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, memo } from 'react';\nimport { Avatar, Button, Card, Comment, List, Popover } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { TwitterOutlined, LikeOutlined, MailOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport CommentForm from '../container/CommentForm';\nimport FollowButton from '../components/FollowButton';\nmoment.locale('ko');\nconst CardWrapper = styled.div`\n  margin-bottom: 20px;\n`;\nconst PostCard = memo(({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const id = useSelector(state => state.user.me && state.user.me.id);\n  const dispatch = useDispatch();\n  console.log(id);\n  const liked = id && post.Likers && post.Likers.find(v => v.id === id);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onToggleLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인 필요');\n    }\n\n    if (liked) {\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id, post && post.id]);\n  const onFollow = useCallback(userId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onUnfollow = useCallback(userId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onRemovePost = useCallback(postId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: postId\n    });\n  });\n  return __jsx(CardWrapper, null, __jsx(Card, {\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(TwitterOutlined, {\n      onClick: onRetweet\n    }), __jsx(LikeOutlined, {\n      theme: liked ? \"twoTone\" : \"outlined\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(MailOutlined, {\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, id && post.UserId === id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(EllipsisOutlined, null))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n    extra: __jsx(FollowButton, {\n      post: post,\n      onUnfollow: onUnfollow,\n      onFollow: onFollow\n    })\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  }), moment(post.createAt).format('YYYY.mm.dd')) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n});\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string\n  })\n};\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}