{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport AppLayout from '../components/AppLayout';\nimport PropTypes from 'prop-types';\nimport withRedex from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport reducer from '../reducers';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\nimport { Helmet } from 'react-helmet';\nimport { Container } from 'next/app';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return __jsx(Container, null, __jsx(Provider, {\n    store: store\n  }, __jsx(Helmet, {\n    title: \"NodeBird\",\n    htmlAttributes: {\n      lang: 'ko'\n    },\n    meta: [{\n      charset: 'UTF-8'\n    }, {\n      name: 'viewport',\n      content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover'\n    }, {\n      'http-equiv': 'X-UA-Compatible',\n      content: 'IE=edge'\n    }, {\n      name: 'description',\n      content: ' NodeBird SNS'\n    }, {\n      name: 'og:title',\n      content: 'NodeBird'\n    }, {\n      name: 'og:description',\n      content: 'NodeBird SNS'\n    }, {\n      property: 'og:type',\n      content: 'website'\n    }],\n    link: [{\n      rel: 'shortcut icon',\n      href: '/favicon.ico'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css'\n    }]\n  }), __jsx(AppLayout, null, __jsx(Component, pageProps))));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n}; //getInitialProps를 사용할 수 있게 하는 사전 작업\n\nNodeBird.getInitialProps = async context => {\n  const {\n    ctx,\n    Component\n  } = context;\n  console.log(ctx);\n  let pageProps = {};\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\n\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  const state = ctx.store.getState();\n\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  } //컴포넌트의 프롭스\n\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, store => next => action => {\n    console.log(action);\n    next(action);\n  }];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer); //withReduxSaga할 때 필요\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; //redux를 사용하기 위해 store를 사용해야하는데 그 store를 만들어주는 부분\n\n\nexport default withRedex(configureStore)(withReduxSaga(NodeBird));","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/pages/_app.js"],"names":["React","AppLayout","PropTypes","withRedex","withReduxSaga","reducer","Provider","createStore","compose","applyMiddleware","createSagaMiddleware","rootSaga","LOAD_USER_REQUEST","axios","Helmet","Container","NodeBird","Component","store","pageProps","lang","charset","name","content","property","rel","href","propTypes","elementType","isRequired","object","getInitialProps","context","ctx","console","log","cookie","isServer","req","headers","defaults","Cookie","state","getState","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","next","action","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PropTypes  from 'prop-types';\r\nimport withRedex from 'next-redux-wrapper';\r\nimport withReduxSaga from 'next-redux-saga';\r\nimport reducer from '../reducers';\r\nimport {Provider} from 'react-redux'\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport axios from 'axios';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container} from 'next/app';\r\n\r\n\r\nconst NodeBird = ({Component, store, pageProps}) => {\r\n\r\n    return (\r\n      <Container>\r\n        <Provider store={store}>\r\n          <Helmet\r\n          title=\"NodeBird\"\r\n          htmlAttributes={{ lang: 'ko' }}\r\n          meta={[{\r\n            charset: 'UTF-8',\r\n          }, {\r\n            name: 'viewport',\r\n            content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover',\r\n          }, {\r\n            'http-equiv': 'X-UA-Compatible', content: 'IE=edge',\r\n          }, {\r\n            name: 'description', content: ' NodeBird SNS',\r\n          }, {\r\n            name: 'og:title', content: 'NodeBird',\r\n          }, {\r\n            name: 'og:description', content: 'NodeBird SNS',\r\n          }, {\r\n            property: 'og:type', content: 'website',\r\n          }]}\r\n          link={[{\r\n            rel: 'shortcut icon', href: '/favicon.ico',\r\n          }, {\r\n            rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css',\r\n          }, {\r\n            rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css',\r\n          }, {\r\n            rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css',\r\n          }]}\r\n        />\r\n            <AppLayout>\r\n                <Component {...pageProps} />\r\n            </AppLayout>\r\n        </Provider>\r\n      </Container>\r\n    )\r\n};\r\n\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType.isRequired,\r\n    store: PropTypes.object.isRequired,\r\n    pageProps: PropTypes.object.isRequired,\r\n};\r\n\r\n//getInitialProps를 사용할 수 있게 하는 사전 작업\r\nNodeBird.getInitialProps = async (context) => {\r\n\r\n    const { ctx, Component } = context;\r\n    console.log(ctx);\r\n    let pageProps = {};\r\n\r\n    const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\r\n\r\n    if(ctx.isServer && cookie)\r\n    {\r\n      axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    \r\n    const state = ctx.store.getState();\r\n    if(!state.user.me){\r\n      ctx.store.dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n      });\r\n    }\r\n\r\n    if (Component.getInitialProps) {\r\n      pageProps = await Component.getInitialProps(ctx);\r\n    }\r\n\r\n    //컴포넌트의 프롭스\r\n    return { pageProps };\r\n  };\r\n\r\nconst configureStore = (initialState, options)=>{\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware, (store)=>(next)=>(action)=> {\r\n      console.log(action);\r\n      next(action);\r\n    }];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n        applyMiddleware(...middlewares),\r\n        !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n      );\r\n    const store = createStore(reducer,initialState,enhancer);\r\n    //withReduxSaga할 때 필요\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n}\r\n\r\n//redux를 사용하기 위해 store를 사용해야하는데 그 store를 만들어주는 부분\r\nexport default withRedex(configureStore)(withReduxSaga(NodeBird));"]},"metadata":{},"sourceType":"module"}