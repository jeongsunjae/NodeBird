{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignup),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, delay, put, takeEvery, call } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from \"../reducers/user\";\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\nfunction loginAPI(loginData) {\n  // 서버에 요청\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청\n  return axios.post('/user/', signUpData);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignup() {\n  return _regeneratorRuntime.wrap(function watchSignup$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchSignup)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/sagas/user.js"],"names":["login","watchLogin","signUp","watchSignup","userSaga","all","fork","delay","put","takeEvery","call","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","axios","defaults","baseURL","loginAPI","loginData","post","withCredentials","action","data","result","type","console","error","signUpAPI","signUpData"],"mappings":";;oDAcUA,K;qDAiBAC,U;qDAaAC,M;qDAmBAC,W;qDAMeC,Q;;AArEzB,SAAQC,GAAR,EAAaC,IAAb,EAAkBC,KAAlB,EAAwBC,GAAxB,EAA4BC,SAA5B,EAAsCC,IAAtC,QAAiD,oBAAjD;AACA,SAASC,cAAT,EAAwBC,cAAxB,EAAwCC,cAAxC,EAAwDC,eAAxD,EAAyEC,eAAzE,EAAyFC,eAAzF,QAAgH,kBAAhH;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;;AAGA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC7B;AACI,SAAOJ,KAAK,CAACK,IAAN,CAAW,aAAX,EAA0BD,SAA1B,EAAqC;AACxCE,IAAAA,eAAe,EAAE;AADuB,GAArC,CAAP;AAGH;;AAED,SAAUvB,KAAV,CAAgBwB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMd,IAAI,CAACU,QAAD,EAAWI,MAAM,CAACC,IAAlB,CAAV;;AAFvB;AAEcC,UAAAA,MAFd;AAAA;AAGQ,iBAAMlB,GAAG,CAAC;AACNmB,YAAAA,IAAI,EAACf,cADC;AAENa,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUQG,UAAAA,OAAO,CAACC,KAAR;AAVR;AAWQ,iBAAMrB,GAAG,CAAC;AACNmB,YAAAA,IAAI,EAACd;AADC,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMQ,SAAS,CAACE,cAAD,EAAiBX,KAAjB,CAAf;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAS8B,SAAT,CAAmBC,UAAnB,EAA+B;AAC3B;AACA,SAAOd,KAAK,CAACK,IAAN,CAAW,QAAX,EAAoBS,UAApB,CAAP;AACF;;AAGF,SAAU7B,MAAV,CAAiBsB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMd,IAAI,CAACoB,SAAD,EAAYN,MAAM,CAACC,IAAnB,CAAV;;AAHR;AAAA;AAKQ,iBAAMjB,GAAG,CAAC;AACNmB,YAAAA,IAAI,EAACX;AADC,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWQY,UAAAA,OAAO,CAACC,KAAR;AAXR;AAYQ,iBAAMrB,GAAG,CAAC;AACNmB,YAAAA,IAAI,EAACZ,eADC;AAENc,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAU1B,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMM,SAAS,CAACK,eAAD,EAAkBZ,MAAlB,CAAf;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAENC,IAAI,CAACL,UAAD,CAFE,EAGNK,IAAI,CAACH,WAAD,CAHE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, fork,delay,put,takeEvery,call} from \"redux-saga/effects\";\r\nimport { LOG_IN_REQUEST,LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE,SIGN_UP_SUCCESS } from \"../reducers/user\";\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3065/api';\r\n\r\n\r\nfunction loginAPI(loginData) {\r\n// 서버에 요청\r\n    return axios.post('/user/login', loginData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* login(action){\r\n    try {\r\n        const result = yield call(loginAPI, action.data);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }\r\n    catch (e)\r\n    {\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n\r\n    yield takeEvery(LOG_IN_REQUEST, login)\r\n\r\n}\r\n\r\n\r\nfunction signUpAPI(signUpData) {\r\n    // 서버에 요청\r\n    return axios.post('/user/',signUpData)\r\n }\r\n    \r\n\r\nfunction* signUp(action){\r\n    try {\r\n        // yield call(signAPI);\r\n        yield call(signUpAPI, action.data);\r\n\r\n        yield put({\r\n            type:SIGN_UP_SUCCESS\r\n        })\r\n    }\r\n    catch (e)\r\n    {\r\n        console.error(e);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchSignup() {\r\n\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n\r\n        fork(watchLogin),\r\n        fork(watchSignup),\r\n\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}