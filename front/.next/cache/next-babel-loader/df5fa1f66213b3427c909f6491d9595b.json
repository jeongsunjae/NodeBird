{"ast":null,"code":"import { all, fork, delay, put, takeEvery, call } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from \"../reducers/user\";\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\nfunction loginAPI(loginData) {\n  // 서버에 요청\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield call(signAPI);\n    yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignup() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/sagas/user.js"],"names":["all","fork","delay","put","takeEvery","call","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","axios","defaults","baseURL","loginAPI","loginData","post","withCredentials","login","action","result","data","type","e","console","error","watchLogin","signUpAPI","signUpData","signUp","watchSignup","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogOut","LOG_OUT_REQUEST","loadUserAPI","get","loadUser","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","watchLoadUser","LOAD_USER_REQUEST","userSaga","watchLogIn","watchSignUp"],"mappings":"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","sourcesContent":["import {all, fork,delay,put,takeEvery,call} from \"redux-saga/effects\";\r\nimport { LOG_IN_REQUEST,LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE,SIGN_UP_SUCCESS } from \"../reducers/user\";\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3065/api';\r\n\r\n\r\nfunction loginAPI(loginData) {\r\n// 서버에 요청\r\n    return axios.post('/user/login', loginData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* login(action){\r\n    try {\r\n        const result = yield call(loginAPI, action.data);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }\r\n    catch (e)\r\n    {\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n\r\n    yield takeEvery(LOG_IN_REQUEST, login)\r\n\r\n}\r\n\r\n\r\nfunction signUpAPI(signUpData) {\r\n    // 서버에 요청\r\n    return axios.post('/user/',signUpData)\r\n }\r\n    \r\n\r\nfunction* signUp(action){\r\n    try {\r\n        // yield call(signAPI);\r\n        yield call(signUpAPI, action.data);\r\n\r\n        yield put({\r\n            type:SIGN_UP_SUCCESS\r\n        })\r\n    }\r\n    catch (e)\r\n    {\r\n        console.error(e);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchSignup() {\r\n\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n\r\n}\r\n\r\nfunction logOutAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/logout', {}, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* logOut() {\r\n    try {\r\n      // yield call(logOutAPI);\r\n      yield call(logOutAPI);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOG_OUT_SUCCESS,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOG_OUT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLogOut() {\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n  }\r\n  \r\n  function loadUserAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get('/user/', {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* loadUser() {\r\n    try {\r\n      // yield call(loadUserAPI);\r\n      const result = yield call(loadUserAPI);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOAD_USER_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOAD_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLoadUser() {\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n  }\r\n  \r\n  export default function* userSaga() {\r\n    yield all([\r\n      fork(watchLogIn),\r\n      fork(watchLogOut),\r\n      fork(watchLoadUser),\r\n      fork(watchSignUp),\r\n    ]);\r\n  }"]},"metadata":{},"sourceType":"module"}