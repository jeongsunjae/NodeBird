{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport { TwitterOutlined, LikeOutlined, MailOutlined, EllipsisOutlined } from '@ant-design/icons';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    // e.preventDefault();\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img\n    }),\n    actions: [__jsx(TwitterOutlined, null), __jsx(LikeOutlined, null), __jsx(MailOutlined, {\n      onClick: onToggleComment\n    }), __jsx(EllipsisOutlined, null)],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(v => {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: `/hashtag/${v.slice(1)}`,\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uBC84\\uD2BC\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Icon","Input","List","Link","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","TwitterOutlined","LikeOutlined","MailOutlined","EllipsisOutlined","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","pathname","query","User","nickname","content","split","map","v","match","tag","slice","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\nimport {TwitterOutlined,LikeOutlined,MailOutlined,EllipsisOutlined } from '@ant-design/icons';\r\n\r\nconst PostCard = ({ post }) => {\r\n\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const {me} = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) => {\r\n    // e.preventDefault();\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        postId: post.id,\r\n      },\r\n    });\r\n  }, [me && me.id]);\r\n\r\n  useEffect(() => {\r\n    setCommentText('');\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback((e) => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n    <Card\r\n      key={+post.createdAt}\r\n      cover={post.img && <img alt=\"example\" src={post.img} />}\r\n      actions={[\r\n        <TwitterOutlined />,\r\n        <LikeOutlined />,\r\n        <MailOutlined onClick={onToggleComment}/>,\r\n        <EllipsisOutlined />,\r\n      ]}\r\n      extra={<Button>팔로우</Button>}\r\n    >\r\n      <Card.Meta\r\n        avatar={<Link href={{pathname: '/user', query: {id: post.User.id}}} as={`/user/${post.User.id}`}>\r\n          <a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n        title={post.User.nickname}\r\n        description={(\r\n          <div>\r\n            {post.content.split(/(#[^\\s]+)/g).map((v)=> {\r\n            if(v.match(/#[^\\s]+/)) {\r\n              return (\r\n                <Link href={{pathname: '/hashtag', query:{tag: v.slice(1)}}} as={`/hashtag/${v.slice(1)}`}  key={v}><a>{v}</a></Link>\r\n              );\r\n            }\r\n            return v;\r\n          })}\r\n          </div>\r\n        )}\r\n      />\r\n    </Card>\r\n    {commentFormOpened && (\r\n        <>\r\n          <Form onFinish={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>버튼</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Link href={{pathname: '/user', query: {id: item.User.id}}} as={`user/${item.User.id}`}>\r\n                    \r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n  }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}