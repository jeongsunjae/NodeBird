{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var imageInput = useRef();\n  useEffect(function () {\n    if (postAdded) {\n      setText('');\n    }\n  }, [postAdded]);\n  var onSubmitForm = useCallback(function (e) {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (i) {\n      formData.append('image', i);\n    });\n    formData.append('content', text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onChangeImages = useCallback(function (e) {\n    console.log(e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        index: index\n      });\n    };\n  }, []);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmitForm\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n    value: text,\n    onChange: onChangeText\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": 'right'\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"\\uB4F1\\uB85D\")), __jsx(\"div\", null, imagePaths.map(function (v, i) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block'\n      }\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3065/\".concat(v),\n      style: {\n        width: '200px'\n      },\n      alt: v\n    }), __jsx(\"div\", null, __jsx(Button, {\n      onClick: onRemoveImage(i)\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/container/PostForm.js"],"names":["React","useCallback","useState","useEffect","useRef","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","setText","state","post","imagePaths","isAddingPost","postAdded","imageInput","onSubmitForm","e","trim","alert","formData","FormData","forEach","i","append","type","data","onChangeText","target","value","onChangeImages","console","log","files","imageFormData","call","f","onClickImageUpload","current","click","onRemoveImage","index","margin","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const imageInput = useRef();\r\n\r\n  useEffect(() => {\r\n    if (postAdded) {\r\n      setText('');\r\n    }\r\n  }, [postAdded]);\r\n\r\n  const onSubmitForm = useCallback((e) => {\r\n    \r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n\r\n    const formData = new FormData();\r\n\r\n    imagePaths.forEach((i)=> {\r\n      formData.append('image', i);\r\n    });\r\n    formData.append('content', text);\r\n\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n\r\n\r\n  const onChangeImages = useCallback((e)=> {\r\n    console.log(e.target.files);\r\n\r\n    const imageFormData = new FormData();\r\n\r\n    [].forEach.call(e.target.files, (f) => {\r\n\r\n      imageFormData.append('image', f);\r\n\r\n    });\r\n\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    })\r\n  },[])\r\n  const onClickImageUpload = useCallback(() => {\r\n    \r\n    imageInput.current.click();\r\n\r\n  },[imageInput.current]);\r\n\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      index,\r\n    });\r\n  },[]);\r\n\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmitForm}>\r\n      <Input.TextArea maxLength={140} placeholder=\"내용을 입력하세요\" value={text} onChange={onChangeText} />\r\n      <div>\r\n        <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\" loading={isAddingPost}>등록</Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v,i) => (\r\n          <div key={v} style={{ display: 'inline-block' }}>\r\n            <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n            <div>\r\n              <Button onClick={onRemoveImage(i)}>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}