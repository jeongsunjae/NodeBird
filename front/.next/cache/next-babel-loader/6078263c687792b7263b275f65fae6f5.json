{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\n\nfunction loginAPI() {// 서버에 요청\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/sagas/user.js"],"names":["login","watchLogin","userSaga","all","fork","takeLatest","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","call","put","type","console","error"],"mappings":";;oDAOUA,K;qDAgBAC,U;qDAMeC,Q;;AA7BzB,SAAQC,GAAR,EAAaC,IAAb,EAAkBC,UAAlB,QAAmC,oBAAnC;AACA,SAASC,MAAT,EAAgBC,cAAhB,EAAgCC,cAAhC,QAAsD,kBAAtD;;AAEA,SAASC,QAAT,GAAoB,CACpB;AACC;;AAED,SAAUT,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMU,IAAI,CAACD,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAME,GAAG,CAAC;AACNC,YAAAA,IAAI,EAACL;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQM,UAAAA,OAAO,CAACC,KAAR;AATR;AAUQ,iBAAMH,GAAG,CAAC;AACNC,YAAAA,IAAI,EAACJ;AADC,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUP,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMI,UAAU,CAACC,MAAD,EAASN,KAAT,CAAhB;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAENC,IAAI,CAACH,UAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, fork,takeLatest} from \"redux-saga/effects\";\r\nimport { LOG_IN,LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\r\n\r\nfunction loginAPI() {\r\n// 서버에 요청\r\n}\r\n\r\nfunction* login(){\r\n    try {\r\n        yield call(loginAPI);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS\r\n        })\r\n    }\r\n    catch (e)\r\n    {\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n\r\n    yield takeLatest(LOG_IN, login)\r\n\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n\r\n        fork(watchLogin),\r\n\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}