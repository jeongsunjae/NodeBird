{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 초기값\nexport const intialState = {\n  isLoggedIn: false,\n  user: {}\n};\nconst LOG_IN = 'LOG_IN'; // 액션 이름\n\nconst LOG_OUT = 'LOG_OUT'; // 액션 이름\n// 액션의 값\n\nconst loginAction = {\n  type: LOG_IN,\n  data: {\n    nickname: '정선재'\n  }\n};\nconst logoutAction = {\n  type: LOG_OUT\n};\n\nconst reducer = (state = intialState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread({}, satae, {\n          isLoggedIn: true,\n          user: action.data\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/reducers/user.js"],"names":["intialState","isLoggedIn","user","LOG_IN","LOG_OUT","loginAction","type","data","nickname","logoutAction","reducer","state","action","satae"],"mappings":";;;;;;AACA;AACA,OAAO,MAAMA,WAAW,GAAG;AACvBC,EAAAA,UAAU,EAAE,KADW;AAEvBC,EAAAA,IAAI,EAAC;AAFkB,CAApB;AAKP,MAAMC,MAAM,GAAG,QAAf,C,CAAyB;;AACzB,MAAMC,OAAO,GAAG,SAAhB,C,CAA2B;AAE3B;;AACA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,IAAI,EAAEH,MADU;AAEhBI,EAAAA,IAAI,EAAG;AACHC,IAAAA,QAAQ,EAAE;AADP;AAFS,CAApB;AAOA,MAAMC,YAAY,GAAG;AACjBH,EAAAA,IAAI,EAAEF;AADW,CAArB;;AAKA,MAAMM,OAAO,GAAG,CAACC,KAAK,GAAGX,WAAT,EAAsBY,MAAtB,KAAiC;AAE5C,UAAOA,MAAM,CAACN,IAAd;AAEI,SAAKH,MAAL;AAAa;AACT,iCACOU,KADP;AAEIZ,UAAAA,UAAU,EAAE,IAFhB;AAGIC,UAAAA,IAAI,EAAEU,MAAM,CAACL;AAHjB;AAKH;;AACD,SAAKH,OAAL;AAAe;AACX,iCACOO,KADP;AAEIV,UAAAA,UAAU,EAAE,KAFhB;AAGIC,UAAAA,IAAI,EAAE;AAHV;AAKH;;AACD;AAAS;AACN,iCACOS,KADP;AAGH;AApBJ;AAuBJ,CAzBD;;AA2BA,eAAeD,OAAf","sourcesContent":["\r\n// 초기값\r\nexport const intialState = {\r\n    isLoggedIn: false,\r\n    user:{},\r\n};\r\n\r\nconst LOG_IN = 'LOG_IN'; // 액션 이름\r\nconst LOG_OUT = 'LOG_OUT'; // 액션 이름\r\n\r\n// 액션의 값\r\nconst loginAction = {\r\n    type: LOG_IN,\r\n    data : {\r\n        nickname: '정선재',\r\n    },\r\n};\r\n\r\nconst logoutAction = {\r\n    type: LOG_OUT,\r\n}\r\n\r\n\r\nconst reducer = (state = intialState, action) => {\r\n\r\n     switch(action.type)\r\n     {\r\n         case LOG_IN: {\r\n             return {\r\n                 ...satae,\r\n                 isLoggedIn: true,\r\n                 user: action.data,\r\n             }\r\n         }\r\n         case LOG_OUT : {\r\n             return {\r\n                 ...state,\r\n                 isLoggedIn: false,\r\n                 user: null,\r\n             }\r\n         }\r\n         default :{\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n     }\r\n\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}