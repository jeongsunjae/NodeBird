{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useSelector } from \"react-redux\";\nimport PropsTypes from 'prop-types';\nimport { LOAD_POST_REQUEST } from \"../reducers/post\";\nimport { Helmet } from 'react-helmet';\n\nvar Post = function Post(_ref) {\n  var id = _ref.id;\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      singlePost = _useSelector.singlePost;\n\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    title: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAE00\"),\n    description: singlePost,\n    meta: [{\n      name: 'description',\n      content: singlePost.content\n    }, {\n      property: 'og:title',\n      content: \"\".concat(singlePost, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n    }, {\n      property: 'og:description',\n      content: singlePost.content\n    }, {\n      property: 'og:image',\n      content: singlePost.Images[0] && \"http://localhost:3065/\".concat(singlePost.Images[0].src)\n    }, {\n      property: 'og:url',\n      content: \"http://localhost:3060/post/\".concat(id)\n    }]\n  }), __jsx(\"div\", null, id), __jsx(\"div\", null, singlePost.content), __jsx(\"div\", null, singlePost.User.nickname), __jsx(\"div\", null, singlePost.Images[0] && __jsx(\"img\", {\n    src: \"http://localhost:3065/\".concat(singlePost.Images[0].src)\n  })));\n};\n\nPost.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          context.store.dispatch({\n            type: LOAD_POST_REQUEST,\n            data: context.query.id\n          });\n          return _context.abrupt(\"return\", {\n            id: parseInt(context.query.id, 10)\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nPost.propsTypes = {\n  id: PropsTypes.number.isRequired\n};\nexport default Post;","map":{"version":3,"sources":["C:/Users/admin/Desktop/NodeBird/front/pages/post.js"],"names":["useSelector","PropsTypes","LOAD_POST_REQUEST","Helmet","Post","id","state","post","singlePost","User","nickname","name","content","property","Images","src","getInitialProps","context","store","dispatch","type","data","query","parseInt","propsTypes","number","isRequired"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAAQC,MAAR,QAAqB,cAArB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAU;AAAA,MAARC,EAAQ,QAARA,EAAQ;;AAAA,qBACIL,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAEA,KAAK,CAACC,IAAR;AAAA,GAAN,CADf;AAAA,MACXC,UADW,gBACXA,UADW;;AAEnB,SACI,4BACI,MAAC,MAAD;AACI,IAAA,KAAK,YAAKA,UAAU,CAACC,IAAX,CAAgBC,QAArB,wBADT;AAEI,IAAA,WAAW,EAAEF,UAFjB;AAGI,IAAA,IAAI,EAAE,CAAC;AACHG,MAAAA,IAAI,EAAE,aADH;AAEHC,MAAAA,OAAO,EAAEJ,UAAU,CAACI;AAFjB,KAAD,EAIN;AACIC,MAAAA,QAAQ,EAAE,UADd;AAC0BD,MAAAA,OAAO,YAAKJ,UAAL;AADjC,KAJM,EAON;AACIK,MAAAA,QAAQ,EAAE,gBADd;AACgCD,MAAAA,OAAO,EAACJ,UAAU,CAACI;AADnD,KAPM,EAUN;AACIC,MAAAA,QAAQ,EAAE,UADd;AAC0BD,MAAAA,OAAO,EAACJ,UAAU,CAACM,MAAX,CAAkB,CAAlB,qCAAiDN,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBC,GAAtE;AADlC,KAVM,EAcN;AACIF,MAAAA,QAAQ,EAAC,QADb;AACwBD,MAAAA,OAAO,uCAA+BP,EAA/B;AAD/B,KAdM;AAHV,IADJ,EAuBI,mBAAMA,EAAN,CAvBJ,EAwBI,mBAAMG,UAAU,CAACI,OAAjB,CAxBJ,EAyBI,mBAAMJ,UAAU,CAACC,IAAX,CAAgBC,QAAtB,CAzBJ,EA0BI,mBACKF,UAAU,CAACM,MAAX,CAAkB,CAAlB,KAAwB;AAAK,IAAA,GAAG,kCAA2BN,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBC,GAAhD;AAAR,IAD7B,CA1BJ,CADJ;AAgCH,CAlCD;;AAoCAX,IAAI,CAACY,eAAL,GAAuB,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AACnBA,UAAAA,OAAO,CAACC,KAAR,CAAcC,QAAd,CAAuB;AACnBC,YAAAA,IAAI,EAAElB,iBADa;AAEnBmB,YAAAA,IAAI,EAAEJ,OAAO,CAACK,KAAR,CAAcjB;AAFD,WAAvB;AADmB,2CAMZ;AAAEA,YAAAA,EAAE,EAAGkB,QAAQ,CAACN,OAAO,CAACK,KAAR,CAAcjB,EAAf,EAAmB,EAAnB;AAAf,WANY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AASAD,IAAI,CAACoB,UAAL,GAAkB;AACdnB,EAAAA,EAAE,EAAEJ,UAAU,CAACwB,MAAX,CAAkBC;AADR,CAAlB;AAIA,eAAetB,IAAf","sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport PropsTypes from 'prop-types';\r\nimport { LOAD_POST_REQUEST } from \"../reducers/post\";\r\nimport {Helmet} from 'react-helmet';\r\n\r\nconst Post = ({id}) => {\r\n    const { singlePost } = useSelector(state=>state.post);\r\n    return (\r\n        <>\r\n            <Helmet \r\n                title={`${singlePost.User.nickname}님의 글`}\r\n                description={singlePost}\r\n                meta={[{\r\n                    name: 'description',\r\n                    content: singlePost.content,\r\n                },\r\n                {\r\n                    property: 'og:title', content: `${singlePost}님의 게시글`\r\n                },\r\n                {\r\n                    property: 'og:description', content:singlePost.content,\r\n                },\r\n                {\r\n                    property: 'og:image', content:singlePost.Images[0] && `http://localhost:3065/${singlePost.Images[0].src}`,\r\n\r\n                },\r\n                {\r\n                    property:'og:url' , content:`http://localhost:3060/post/${id}`,\r\n                }\r\n            ]}\r\n            />\r\n            <div>{id}</div>\r\n            <div>{singlePost.content}</div>\r\n            <div>{singlePost.User.nickname}</div>\r\n            <div>\r\n                {singlePost.Images[0] && <img src={`http://localhost:3065/${singlePost.Images[0].src}`}/>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async(context) => {\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.query.id,\r\n    });\r\n\r\n    return { id : parseInt(context.query.id, 10)};\r\n};\r\n\r\nPost.propsTypes = {\r\n    id: PropsTypes.number.isRequired,\r\n};\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}