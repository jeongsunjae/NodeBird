{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.dd359e4f06a10d40b5f0.hot-update.js","sources":["webpack:///./components/PostCard.js","webpack:///./components/PostImages.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post';\r\nimport {TwitterOutlined,LikeOutlined,MailOutlined,EllipsisOutlined } from '@ant-design/icons';\r\nimport PostImages from './PostImages';\r\n\r\nconst PostCard = ({ post }) => {\r\n\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const {me} = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n    if (!commentFormOpened) {\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) => {\r\n    //e.preventDefault();\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id, commentText]);\r\n\r\n  useEffect(() => {\r\n    setCommentText('');\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback((e) => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n  \r\n  console.log(post);\r\n  return (\r\n    <div>\r\n    <Card\r\n      key={+post.createdAt}\r\n      cover={post.Images  && post.Images[0] && <PostImages images={post.Images} />}\r\n      actions={[\r\n        <TwitterOutlined />,\r\n        <LikeOutlined />,\r\n        <MailOutlined onClick={onToggleComment}/>,\r\n        <EllipsisOutlined />,\r\n      ]}\r\n      extra={<Button>팔로우</Button>}\r\n    >\r\n      <Card.Meta\r\n        avatar={(\r\n        <Link href={{pathname: '/user', query: {id: post.User.id}}} as={`/user/${post.User.id}`}>\r\n          <a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>\r\n        )}\r\n        title={post.User.nickname}\r\n        description={(\r\n          <div>\r\n            {post.content.split(/(#[^\\s]+)/g).map((v)=> {\r\n            if(v.match(/#[^\\s]+/)) {\r\n              return (\r\n                <Link href={{pathname: '/hashtag', query:{tag: v.slice(1)}}} as={`/hashtag/${v.slice(1)}`}  key={v}><a>{v}</a></Link>\r\n              );\r\n            }\r\n            return v;\r\n          })}\r\n          </div>\r\n        )}\r\n      />\r\n    </Card>\r\n    {commentFormOpened && (\r\n        <>\r\n          <Form onFinish={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>버튼</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Link href={{pathname: '/user', query: {id: item.User.id}}} as={`user/${item.User.id}`}>\r\n                    \r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n  }),\r\n};\r\n\r\nexport default PostCard;","import React, { useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {PlusOutlined } from '@ant-design/icons';\r\nimport ImagesZoom from './ImagesZoom';\r\n\r\nconst PostImages = ({ images }) => {\r\n    console.log(images);\r\n  const [showImagesZoom, setShowImagesZoom] = useState(false);\r\n\r\n  const onZoom = useCallback(() => {\r\n    setShowImagesZoom(true);\r\n  }, []);\r\n\r\n  const onClose = useCallback(() => {\r\n    setShowImagesZoom(false);\r\n  }, []);\r\n\r\n  if (images.length === 1) {\r\n    return (\r\n      <>\r\n        <img src={`http://localhost:3065/${images[0].src}`} onClick={onZoom} />\r\n        {showImagesZoom && <ImagesZoom images={images} onClose={onClose} />}\r\n      </>\r\n    );\r\n  }\r\n  \r\n  if (images.length === 2) {\r\n        return (\r\n        <>\r\n            <div>\r\n            <img src={`http://localhost:3065/${images[0].src}`} width=\"50%\" onClick={onZoom} />\r\n            <img src={`http://localhost:3065/${images[1].src}`} width=\"50%\" onClick={onZoom} />\r\n            </div>\r\n            {showImagesZoom && <ImagesZoom images={images} onClose={onClose} />}\r\n        </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div>\r\n      <img src={`http://localhost:3065/${images[0].src}`} width=\"50%\" onClick={onZoom} />\r\n      <div style={{ display: 'inline-block', width: '50%', textAlign: 'center', verticalAlign: 'middle' }} onClick={onZoom}>\r\n      <PlusOutlined />\r\n        <br />\r\n        {images.length - 1}\r\n        개의 사진 더보기\r\n      </div>\r\n    </div>\r\n      {showImagesZoom && <ImagesZoom images={images} onClose={onClose} />}\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nPostImages.propTypes = {\r\n  images: PropTypes.arrayOf(PropTypes.shape({\r\n    src: PropTypes.string,\r\n  })).isRequired,\r\n};\r\n\r\nexport default PostImages;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AAJA;AACA;AADA;AAKA;AAAA;AALA;AAAA;AACA;AAKA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAGA;AATA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAfA;AAsBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AALA;AAFA;AAJA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;;;;;;;;;;;;;;;;;;;;AC1HA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AADA;AADA;AAMA;;;;A","sourceRoot":""}