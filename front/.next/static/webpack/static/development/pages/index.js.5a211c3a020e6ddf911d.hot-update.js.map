{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.5a211c3a020e6ddf911d.hot-update.js","sources":["webpack:///./components/PostCard.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Avatar, Button, Card, Comment, Form, Input, List, Popover  } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\r\nimport {TwitterOutlined,LikeOutlined,MailOutlined,EllipsisOutlined } from '@ant-design/icons';\r\nimport PostImages from './PostImages';\r\nimport PostCardContent from './PostCardContent';\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\r\n\r\nconst PostCard = ({ post }) => {\r\n\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const {me} = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n    if (!commentFormOpened) {\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) => {\r\n    //e.preventDefault();\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id, commentText]);\r\n\r\n  useEffect(() => {\r\n    setCommentText('');\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback((e) => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n  \r\n  const onToggleLike = useCallback(() => {\r\n    if(!me)\r\n    {\r\n      return alert('로그인 필요');\r\n    }\r\n\r\n    if(liked)\r\n    {\r\n      dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }else \r\n    {\r\n        dispatch({\r\n          type: LIKE_POST_REQUEST,\r\n          data: post.id\r\n        });\r\n    }\r\n  }, [me &&  me.id , post && post.id, liked]);\r\n\r\n  const onRetweet = useCallback(()=>{\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n\r\n    return dispatch({\r\n      type:RETWEET_REQUEST,\r\n      data: post.id,\r\n\r\n    });\r\n\r\n  },[me,post && post.id]);\r\n\r\n  const onFollow= useCallback(userId => () => {\r\n    dispatch({\r\n      type: FOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  },[]);\r\n\r\n  const onUnfollow = useCallback(userId => () => {\r\n    dispatch({\r\n      type: UNFOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  },[]);\r\n\r\n  const onRemovePost = useCallback(postId => ()=> {\r\n    dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: postId,\r\n    });\r\n  })\r\n\r\n  return (\r\n    <div>\r\n    <Card\r\n      key={+post.createdAt}\r\n      cover={post.Images  && post.Images[0] && <PostImages images={post.Images} />}\r\n      actions={[\r\n        <TwitterOutlined onClick={onRetweet}/>,\r\n        <LikeOutlined theme={(liked ? \"twoTone\" : \"outlined\")} twoToneColor=\"#eb2f96\" onClick={onToggleLike}/>,\r\n        <MailOutlined onClick={onToggleComment}/>,\r\n        <Popover\r\n        key=\"ellipsis\"\r\n        content={(\r\n          <Button.Group>\r\n            {me && post.UserId === me.id\r\n              ? (\r\n                <>\r\n                  <Button>수정</Button>\r\n                  <Button type=\"danger\" onClick={onRemovePost(post.id)}>삭제</Button>\r\n                </>\r\n              )\r\n              : <Button>신고</Button>}\r\n          </Button.Group>\r\n        )}\r\n      >\r\n        <EllipsisOutlined />\r\n      </Popover>,\r\n      ]}\r\n      title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n      extra={!me || post.User.id === me.id\r\n         ?\r\n          null \r\n        : me.Followings && me.Followings.find(v => v.id === post.User.id)\r\n        ?\r\n          <Button onClick={onUnfollow(post.User.id)}>언팔로우</Button> \r\n        : <Button onClick={onFollow(post.User.id)}>팔로우</Button> \r\n    }\r\n    >\r\n      {post.RetweetId && post.Retweet ?\r\n      (\r\n      <Card\r\n      cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n      >\r\n         <Card.Meta\r\n          avatar={(\r\n          <Link href={{pathname: '/user', query: {id: post.User.id}}} as={`/user/${post.User.id}`}>\r\n            <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>\r\n          )}\r\n          title={post.Retweet.User.nickname}\r\n          description={<PostCardContent postData={post.Retweet.content} />}\r\n        />\r\n      </Card>\r\n      )\r\n      :\r\n      (\r\n      <Card.Meta\r\n        avatar={(\r\n        <Link href={{pathname: '/user', query: {id: post.User.id}}} as={`/user/${post.User.id}`}>\r\n          <a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>\r\n        )}\r\n        title={post.User.nickname}\r\n        description={<PostCardContent postData={post.content} />}\r\n      />\r\n      )\r\n        }\r\n    </Card>\r\n    {commentFormOpened && (\r\n        <>\r\n          <Form onFinish={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>버튼</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Link href={{pathname: '/user', query: {id: item.User.id}}} as={`user/${item.User.id}`}>\r\n                    \r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n  }),\r\n};\r\n\r\nexport default PostCard;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AAJA;AACA;AADA;AAKA;AAAA;AALA;AAAA;AACA;AAKA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAOA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAOA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAOA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAMA;AAAA;AAAA;AARA;AAkBA;AACA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAhCA;AAsCA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AANA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AANA;AAaA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AALA;AAFA;AAJA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;;;;A","sourceRoot":""}